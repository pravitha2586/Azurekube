create machines like below

node1 --> 2 CPU ,4 GB RAM   -> UBUNTU 18.04lts
node2 --> 2 CPU, 4GB RAM    -> UBUNTU 18.04lts
node3 --> 2 CPU, 4GB RAM    -> UBUNTU 18.04lts
node4 --> 2 CPU, 4GB RAM

node1 is going to be the kubenetes master
node2,node3,node4 going to be nodes

in all the nodes run the following command



Install Docker Engine (run all the nodes)
---------------------
sudo su

apt-get update && apt-get install -y apt-transport-https curl
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -

[configure Kubernetes repository]

cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF


apt-get update

apt-get install -y kubelet kubeadm kubectl 

apt-mark hold kubelet kubeadm kubectl 

Install Docker packages (run all the nodes)
---------------------------

apt-get update && apt-get install apt-transport-https ca-certificates curl software-properties-common -y

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -

add-apt-repository \
  "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) \
  stable"

apt-get update && apt-get install docker-ce=18.06.2~ce~3-0~ubuntu -y

cat > /etc/docker/daemon.json <<EOF
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
EOF

mkdir -p /etc/systemd/system/docker.service.d

Restart docker.
systemctl daemon-reload
systemctl restart docker

*********************************************************************************
run this below command in only node1.coz we are going to make node1 as kube master

kubeadm init --apiserver-advertise-address $(hostname -i) --pod-network-cidr=192.168.0.0/16
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
export kubever=$(kubectl version | base64 | tr -d '\n')

https://www.weave.works/docs/net/latest/kubernetes/kube-addon/ (kube proxy addons installation)


kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$kubever"
[This is the layer 3 networking driver]


verify:
watch -n 1 kubectl get nodes

kubectl get nodes
kubectl get pods --all-namespaces
kubectl get nodes --show-lables
kubectl get namespaces

***************************************************************

3. services

loadbalancer-facebook.yaml
loadbalancer-twiiter.yaml

the above loadbalancer yaml will work only if you have the nodes in google cloud.because you will have the public ip.
open the file from github and click raw and paste the link as below

kubectl create ns facebook
kubectl apply -f https://raw.githubusercontent.com/pravitha2586/Azurekube/main/nodeport-facebook.yaml
kubectl get pod,services -n facebook -o wide

nodeport-facebook.yaml
nodeport-twitter.yaml

kubectl get pod,services -n twitter -o wide

35.227.119.203:32001

access like above from all node machine ip addresses.it should work from all client machine ip address.then the proxy cluster is working good.

kubectl get services
kubectl describe services
